
varying vec3 vPos;                               // Position in image
uniform float uTime;                             // Time

float raytraceSphere(vec3 V, vec3 W, vec4 S) {
   vec3 center = S.xyz;
   float a = dot(W, W);
   float b = -2.*dot(W, center);
   float c = dot(center, center)-(S.w*S.w);

   float t = ( (-1.*b) + abs( sqrt( (b*b)-(4.*a*c) ) ) )/(2.*a);

   return t;
}

void main() {
   vec3 c = vec3(.01,.01,.04);                   // Dark background

   vec3 V = vec3(0.,0.,0.);                      // Ray origin
   vec3 W = normalize(vec3(vPos.xy, -3.));       // Ray direction
   vec4 S = vec4(0.,0.,-5., .5);                 // Sphere x,y,z,r

   float t = raytraceSphere(V, W, S);            // Ray trace sphere

   if (t > 0.)
      c = vec3(1.,1.,1.);

   gl_FragColor = vec4(sqrt(c), 1.);             // Final pixel color
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


varying vec3 vPos;                               // Position in image
uniform float uTime;                             // Time
vec3 LDir = normalize(vec3(1.,1.,1.));           // Light direction

vec2 raytraceSphere(vec3 V, vec3 W, vec4 S) {
   V -= S.xyz;
   float B = 2. * dot(V, W);
   float C = dot(V, V) - S.w * S.w;
   float discrim = B*B - 4.*C;
   return discrim < 0. ? vec2(-1., -1)
                       : vec2(-B - discrim, -B + discrim) / 2.;
}

vec3 soap(vec3 v) {                              // Make a soap film
   return sin(15. * v);
}


void main() {
   vec3 c = vec3(.01,.01,.04);                   // Dark background

   vec3 V = vec3(0.,0.,0.);                      // Ray origin
   vec3 W = normalize(vec3(vPos.xy, -3.));       // Ray direction
   vec4 S = vec4(0.,0.,-5., .5);                 // Sphere x,y,z,r
   vec4 S2 = vec4(0.,0.25,-5., .5);                 // Sphere x,y,z,r

   vec2 t = raytraceSphere(V, W, S);             // Ray trace sphere
   vec2 t2 = raytraceSphere(V, W, S2);           // Ray trace sphere

   if ( (t.x > 0.) && (t2.x > 0.) && (t.y > 0.) && (t2.y > 0.) && (t2.x < t.y) ) {
      vec3 P = V + t.x * W;                      // Point on sphere
      vec3 N = normalize(P - S.xyz);             // Surface normal
      float brightness = max(0., dot(N, LDir));
      brightness = mix(.1, brightness, .5);      // Diffuse surface
      c = vec3(1.,1.,0.) * brightness;
   }


   gl_FragColor = vec4(sqrt(c), 1.);             // Final pixel color
}



